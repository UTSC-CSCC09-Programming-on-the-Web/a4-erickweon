# Generated OpenAPI Specifications using Copilot
# Prompt: generate openapi3.0 specifications in yaml format
# Updated to reflect authentication, user management, and RESTful design changes
openapi: 3.0.3
info:
  title: Web Gallery API
  version: 2.0.0
  description: REST API for The Web Gallery application with authentication and user management

servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
      required:
        - id
        - username

    UserCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token

    Image:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        UserId:
          type: integer
      required:
        - id
        - title
        - author
        - UserId

    ImageMeta:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        UserId:
          type: integer
      required:
        - id
        - title
        - author
        - UserId

    Comment:
      type: object
      properties:
        id:
          type: integer
        author:
          type: string
        date:
          type: string
        content:
          type: string
        ImageId:
          type: integer
        UserId:
          type: integer
      required:
        - id
        - author
        - date
        - content
        - ImageId
        - UserId

    NewComment:
      type: object
      properties:
        date:
          type: string
        content:
          type: string
        imageId:
          type: integer
      required:
        - date
        - content
        - imageId

    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error

security:
  - BearerAuth: []

paths:
  # User Authentication Endpoints
  /api/users/signup:
    post:
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Username and password are required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users/signin:
    post:
      summary: Sign in user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: Sign in successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Username and password are required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users/signout:
    post:
      summary: Sign out user
      responses:
        "200":
          description: User signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users/me:
    get:
      summary: Get current user information
      responses:
        "200":
          description: Current user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/users:
    get:
      summary: Get all users for gallery selection
      security: []
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /api/users/{userId}/images:
    get:
      summary: Get all image IDs for a specific user
      security: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user whose images to retrieve
      responses:
        "200":
          description: List of image IDs for the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        "400":
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Image Endpoints
  /api/images:
    get:
      summary: Get all image IDs (across all users)
      security: []
      responses:
        "200":
          description: List of all image IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer

    post:
      summary: Add a new image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                picture:
                  type: string
                  format: binary
              required:
                - title
                - picture
      responses:
        "200":
          description: Image created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Missing input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Cannot save image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/images/{imageId}:
    get:
      summary: Get image file by ID
      security: []
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Image file
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: Image ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete image by ID
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Image deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized to delete image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/images/{imageId}/meta:
    get:
      summary: Get image metadata by ID
      security: []
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Image metadata
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageMeta"
        "400":
          description: Image ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/images/{imageId}/comments:
    get:
      summary: Get comments for an image (paginated)
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "400":
          description: Invalid page or limit parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete all comments for an image
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: All comments deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized to delete comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/images/{imageId}/comments/count:
    get:
      summary: Get comment count for an image
      parameters:
        - in: path
          name: imageId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Comment count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
        "400":
          description: Image ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Comment Endpoints
  /api/comments:
    post:
      summary: Add a comment to an image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewComment"
      responses:
        "200":
          description: Comment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Date, content, and imageId are required or Image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Cannot create comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/comments/{commentId}:
    delete:
      summary: Delete a comment by ID
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Comment deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Comment ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized to delete comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
