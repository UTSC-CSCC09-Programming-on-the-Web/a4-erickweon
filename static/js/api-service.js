let apiService = (function () {
  let module = {};
  let curImgIdx = 0;
  let selectedUserId = null;
  const AUTH_TOKEN_KEY = "authToken";

  // formatDate generated by Copilot
  function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  }

  function Comment(imgId, content) {
    this.imageId = imgId;
    this.content = content;
    this.date = formatDate(new Date());
  }

  function getImageIds() {
    return getImageIdsByUser(selectedUserId);
  }

  function getImageIdsByUser(userId) {
    const url = userId ? `/api/images?userId=${userId}` : "/api/images";
    return fetch(url).then((res) => res.json());
  }

  function getNextImgId() {
    return getImageIds().then((imageIds) => {
      if (!imageIds || imageIds.length === 0) {
        return null;
      }
      curImgIdx = (curImgIdx + 1) % imageIds.length;
      return imageIds[curImgIdx];
    });
  }

  function getPrevImgId() {
    return getImageIds().then((imageIds) => {
      if (!imageIds || imageIds.length === 0) {
        return null;
      }
      curImgIdx = (curImgIdx - 1 + imageIds.length) % imageIds.length;
      return imageIds[curImgIdx];
    });
  }

  function getImageById(imageId) {
    const meta = fetch(`/api/images/${imageId}/meta`, {
      headers: getAuthHeaders(),
    }).then((res) => {
      if (!res.ok) {
        return res.json().then((data) => {
          throw new Error(
            `${res.status}: ${data.error || "Failed to fetch image metadata"}`,
          );
        });
      }
      return res.json();
    });

    const image = fetch(`/api/images/${imageId}`, {
      headers: getAuthHeaders(),
    }).then((res) => {
      if (!res.ok) {
        return res.json().then((data) => {
          throw new Error(
            `${res.status}: ${data.error || "Failed to fetch image"}`,
          );
        });
      }
      return res.blob();
    });

    return Promise.all([meta, image]).then(([meta, blob]) => ({
      ...meta,
      blob,
    }));
  }

  function deleteAllCommentsForCurrentImage() {
    return module.getCurrentImage().then((currentImage) => {
      if (!currentImage) return;
      const imageId = currentImage.id;
      return fetch(`/api/images/${imageId}/comments`, {
        method: "DELETE",
        headers: getAuthHeaders(),
      })
        .then((res) =>
          res.json().then((data) => ({ ok: res.ok, data, status: res.status })),
        )
        .then(({ ok, data, status }) => {
          if (!ok) {
            if (status === 404) {
              return { message: "No comments to delete" };
            }
            throw new Error(
              `${status}: ${data.error || "Failed to delete comments"}`,
            );
          }
          return data;
        });
    });
  }

  function saveToken(token) {
    sessionStorage.setItem(AUTH_TOKEN_KEY, token);
  }

  function getToken() {
    return sessionStorage.getItem(AUTH_TOKEN_KEY);
  }

  function clearToken() {
    sessionStorage.removeItem(AUTH_TOKEN_KEY);
  }

  function getAuthHeaders() {
    const token = getToken();
    return token ? { Authorization: `Bearer ${token}` } : {};
  }

  module.signUp = function (username, password) {
    return fetch("/api/users/signup", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ username, password }),
    }).then((res) => res.json());
  };

  module.signIn = function (username, password) {
    return fetch("/api/users/signin", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ username, password }),
    }).then(async (res) => {
      const data = await res.json();
      if (res.ok) saveToken(data.token);
      return data;
    });
  };

  module.signOut = function () {
    return fetch("/api/users/signout", {
      method: "POST",
      headers: getAuthHeaders(),
    }).then((res) => {
      clearToken();
      return res.json();
    });
  };

  module.getCurrentUser = function () {
    return fetch("/api/users/me", {
      headers: getAuthHeaders(),
    }).then((res) => {
      if (res.ok) {
        return res.json();
      } else if (res.status === 401) {
        // Clear invalid token
        clearToken();
        return null;
      } else {
        return null;
      }
    });
  };

  module.getAllUsers = function () {
    return fetch("/api/users")
      .then((res) => {
        if (!res.ok) {
          throw new Error(`Failed to fetch users: ${res.status}`);
        }
        return res.json();
      })
      .catch((err) => {
        console.error("Error fetching users:", err);
        return [];
      });
  };

  module.setSelectedUser = function (userId) {
    selectedUserId = userId;
    curImgIdx = 0;
  };

  module.getSelectedUser = function () {
    return selectedUserId;
  };

  module.clearSelectedUser = function () {
    selectedUserId = null;
    curImgIdx = 0;
  };

  // get the total number of images in the gallery
  module.getTotalImagesCount = function () {
    return getImageIds().then((imageIds) => {
      if (!imageIds || imageIds.length === 0) return 0;
      return imageIds.length;
    });
  };

  module.addImage = function (formData) {
    return fetch("/api/images", {
      method: "POST",
      headers: getAuthHeaders(),
      body: formData,
    }).then((res) => {
      if (!res.ok) {
        return res.json().then((data) => {
          throw new Error(
            `${res.status}: ${data.error || "Failed to add image"}`,
          );
        });
      }
      return module.getTotalImagesCount().then((totalCount) => {
        curImgIdx = totalCount - 1; // set to last image
        return res.json();
      });
    });
  };

  module.getCurrentImage = function () {
    return getImageIds().then((imageIds) => {
      if (imageIds.length === 0) return null;
      const curImgId = imageIds[curImgIdx];
      return getImageById(curImgId);
    });
  };

  module.getNextImage = function () {
    return getNextImgId().then((nextImageId) => {
      if (nextImageId === null) return null;
      return getImageById(nextImageId);
    });
  };

  module.getPrevImage = function () {
    return getPrevImgId().then((prevImageId) => {
      if (prevImageId === null) return null;
      return getImageById(prevImageId);
    });
  };

  module.getImageIndex = function () {
    return module.getTotalImagesCount().then((totalCount) => {
      if (totalCount === 0) return 0; // no images
      return curImgIdx + 1; // +1 to make it 1-based index
    });
  };

  module.deleteImage = function () {
    return deleteAllCommentsForCurrentImage()
      .then(() => {
        return getImageIds().then((imageIds) => {
          if (!imageIds || imageIds.length === 0) return null;
          const imgIdToDel = imageIds[curImgIdx];
          return fetch(`/api/images/${imgIdToDel}`, {
            method: "DELETE",
            headers: getAuthHeaders(),
          }).then((res) => {
            if (!res.ok) {
              return res.json().then((data) => {
                throw new Error(`${res.status}: ${data.error}`);
              });
            }
            return module.getTotalImagesCount().then((totalCount) => {
              // adjust current index if necessary; don't need to adjust if not at boundaries
              if (curImgIdx >= totalCount) {
                curImgIdx = totalCount - 1;
              }
              if (totalCount === 0 || curImgIdx < 0) {
                curImgIdx = 0;
              }
              return module.getCurrentImage();
            });
          });
        });
      })
      .catch((err) => {
        if (err.message.includes("Failed to delete comments")) {
          throw new Error(`Comment deletion failed: ${err.message}`);
        } else {
          throw err;
        }
      });
  };

  module.getCommentsCountForCurrentImage = function () {
    return getImageIds().then((imageIds) => {
      if (imageIds.length === 0) return Promise.resolve(0);
      const curImgId = imageIds[curImgIdx];
      return fetch(`/api/images/${curImgId}/comments/count`, {
        headers: getAuthHeaders(),
      })
        .then((res) => res.json())
        .then((data) => data.count);
    });
  };

  module.getCommentsForCurrentImage = function (page = 0, limit = 10) {
    return getImageIds().then((imageIds) => {
      if (imageIds.length === 0) return Promise.resolve([]);
      const curImgId = imageIds[curImgIdx];
      return fetch(
        `/api/images/${curImgId}/comments?page=${page}&limit=${limit}`,
        {
          headers: getAuthHeaders(),
        },
      ).then((res) => {
        if (!res.ok) {
          return res.json().then((data) => {
            throw new Error(
              `${res.status}: ${data.error || "Failed to fetch comments"}`,
            );
          });
        }
        return res.json();
      });
    });
  };

  module.addCommentToCurrentImage = function (content) {
    return getImageIds().then((imageIds) => {
      const curImgId = imageIds[curImgIdx];
      const comment = new Comment(curImgId, content);
      return fetch("/api/comments", {
        method: "POST",
        headers: {
          ...getAuthHeaders(),
          "Content-Type": "application/json",
        },
        body: JSON.stringify(comment),
      }).then((res) => {
        if (!res.ok) {
          return res.json().then((data) => {
            throw new Error(
              `${res.status}: ${data.error || "Failed to add comment"}`,
            );
          });
        }
        return res.json();
      });
    });
  };

  module.deleteComment = function (commentId) {
    return fetch(`/api/comments/${commentId}`, {
      method: "DELETE",
      headers: getAuthHeaders(),
    }).then((res) => {
      if (!res.ok) {
        return res.json().then((data) => {
          throw new Error(
            `${res.status}: ${data.error || "Failed to delete comment"}`,
          );
        });
      }
      return res.json();
    });
  };

  return module;
})();
