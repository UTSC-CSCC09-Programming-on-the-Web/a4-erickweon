(function () {
  "use strict";

  const [imgTotal, getImgTotal, setImgTotal] = meact.useState(0);
  const [image, getImage, setImage] = meact.useState(null);
  const [commentPage, getCommentPage, setCommentPage] = meact.useState(0);
  const [isAuthenticated, getIsAuthenticated, setIsAuthenticated] =
    meact.useState(false);
  const [currentUser, getCurrentUser, setCurrentUser] = meact.useState(null);
  const [selectedUser, getSelectedUser, setSelectedUser] = meact.useState(null);
  const [allUsers, getAllUsers, setAllUsers] = meact.useState([]);

  function renderImage(image) {
    const imageDiv = document.querySelector(".image");
    const title = document.querySelector("#imageTitle");
    const author = document.querySelector("#imageAuthor");

    if (!image) {
      imageDiv.innerHTML = "<p>No image available</p>";
      title.innerHTML = "";
      author.innerHTML = "";
      return;
    }
    title.innerHTML = image.title;
    author.innerHTML = `By: ${image.author}`;
    const url = URL.createObjectURL(image.blob);
    imageDiv.innerHTML = `<img src="${url}" alt="${image.title}" class="image" />`;
    const img = imageDiv.querySelector("img");
    img.onload = () => URL.revokeObjectURL(url);
  }

  // Idea to offload button permission logic to separate function given by Copilot
  // The code wasn't generated by Copilot, but the prompt was:
  // "My index.js file is becoming messy, how can I clean up persmissions logic for buttons?"
  function updateButtonPermissions() {
    const user = getCurrentUser();
    const currentImage = getImage();
    const isAuth = getIsAuthenticated();
    const selectedUser = getSelectedUser();

    const addImageBtn = document.querySelector("#addImage");
    const deleteImageBtn = document.querySelector("#delImg");
    const addCommentBtn = document.querySelector("#addCommentBtn");

    if (addImageBtn) {
      const canAddImage =
        isAuth && (!selectedUser || (user && selectedUser.id === user.id));
      addImageBtn.style.display = canAddImage ? "block" : "none";
    }

    if (deleteImageBtn) {
      const canDeleteImage =
        isAuth &&
        currentImage &&
        user &&
        (currentImage.UserId === user.id ||
          currentImage.author === user.username);
      deleteImageBtn.style.display = canDeleteImage ? "block" : "none";
    }

    if (addCommentBtn) {
      addCommentBtn.style.display = isAuth ? "block" : "none";
    }
  }

  function commentComponent(comment) {
    const newComment = document.createElement("div");
    newComment.classList.add("comment");

    const user = getCurrentUser();
    const currentImage = getImage();
    const canDeleteComment =
      user &&
      (comment.UserId === user.id || // User owns the comment
        comment.author === user.username || // Fallback check by username
        (currentImage &&
          (currentImage.UserId === user.id ||
            currentImage.author === user.username))); // User owns the image

    newComment.innerHTML = `
      <div class="comment-header">
        <p class="comment-author">${comment.author}</p>
        <p class="comment-date">${comment.date}</p>
      </div>
      <p class="comment-content">${comment.content}</p>
      <div class="comment-footer">
        ${canDeleteComment ? '<button class="icon-container animation-fade delete-comment-icon" title="Delete"></button>' : ""}
      </div>
    `;
    newComment.dataset.id = comment.id;

    if (canDeleteComment) {
      newComment
        .querySelector(".delete-comment-icon")
        .addEventListener("click", function () {
          const commentId = Number(this.closest(".comment").dataset.id);
          apiService
            .deleteComment(commentId)
            .then(() => setCommentPage(0))
            .catch((err) => {
              if (
                err.message.includes("Unauthorized") ||
                err.message.includes("401")
              ) {
                alert("You must be logged in to delete comments");
                setIsAuthenticated(false);
                setCurrentUser(null);
              } else if (
                err.message.includes("Forbidden") ||
                err.message.includes("403") ||
                err.message.includes("Not authorized")
              ) {
                alert("You are not authorized to delete this comment");
              } else {
                alert("Failed to delete comment: " + err.message);
              }
            });
        });
    }
    return newComment;
  }

  function renderUserGallery() {
    const userButtonsContainer = document.querySelector("#userButtons");
    const allUsersBtn = document.querySelector("#allUsersBtn");

    if (!userButtonsContainer) return;

    userButtonsContainer.innerHTML = "";

    allUsersBtn.classList.remove("active");

    const users = getAllUsers();
    const currentSelectedUser = getSelectedUser();
    const currentUser = getCurrentUser();
    const isAuth = getIsAuthenticated();

    if (!currentSelectedUser) {
      allUsersBtn.classList.add("active");
    }

    if (isAuth && currentUser) {
      const myGalleryBtn = document.createElement("button");
      myGalleryBtn.className = "btn user-btn my-gallery-btn";
      myGalleryBtn.textContent = "My Gallery";
      myGalleryBtn.dataset.userId = currentUser.id;

      if (currentSelectedUser && currentSelectedUser.id === currentUser.id) {
        myGalleryBtn.classList.add("active");
      }

      myGalleryBtn.addEventListener("click", function () {
        switchToUserGallery(currentUser);
      });

      userButtonsContainer.appendChild(myGalleryBtn);
    }

    if (Array.isArray(users)) {
      users.forEach((user) => {
        const userBtn = document.createElement("button");
        userBtn.className = "btn user-btn";
        userBtn.textContent = user.username;
        userBtn.dataset.userId = user.id;

        if (currentSelectedUser && currentSelectedUser.id === user.id) {
          userBtn.classList.add("active");
        }

        userBtn.addEventListener("click", function () {
          switchToUserGallery(user);
        });

        userButtonsContainer.appendChild(userBtn);
      });
    }
  }

  function switchToUserGallery(user) {
    setSelectedUser(user);
    apiService.setSelectedUser(user.id);
    setCommentPage(0);

    // Update image display
    apiService
      .getCurrentImage()
      .then((currentImage) => {
        setImage(currentImage);
      })
      .catch(() => {
        setImage(null);
      });

    renderUserGallery();
  }

  function switchToAllUsersGallery() {
    setSelectedUser(null);
    apiService.clearSelectedUser();
    setCommentPage(0);

    // Update image display
    apiService
      .getCurrentImage()
      .then((currentImage) => {
        setImage(currentImage);
      })
      .catch(() => {
        setImage(null);
      });

    renderUserGallery();
  }

  window.addEventListener("DOMContentLoaded", function () {
    apiService
      .getAllUsers()
      .then((users) => {
        setAllUsers(Array.isArray(users) ? users : []);
      })
      .catch((err) => {
        console.error("Failed to load users:", err);
        setAllUsers([]);
      });

    apiService
      .getCurrentUser()
      .then((user) => {
        setIsAuthenticated(!!user);
        setCurrentUser(user);
      })
      .catch(() => {
        setIsAuthenticated(false);
        setCurrentUser(null);
      });

    apiService
      .getCurrentImage()
      .then((currentImage) => {
        setImage(currentImage);
      })
      .catch((err) => {
        if (
          err.message.includes("Unauthorized") ||
          err.message.includes("401")
        ) {
          setIsAuthenticated(false);
          setCurrentUser(null);
        } else {
          setImage(null);
        }
      });

    // click listener for add image button
    document.querySelector("#addImage").addEventListener("click", function () {
      const form = document.querySelector("#addPictureForm");
      if (!form.classList.contains("hidden")) {
        form.classList.add("hidden");
        form.innerHTML = "";
      } else {
        form.classList.remove("hidden");
        form.innerHTML = `
              <input name="title" class="picture-element" type="text" placeholder="Image Title" required />
              <input name="picture" class="picture-element" type="file" required />
              <button class="btn" type="submit">Add Image</button>
          `;
      }
    });

    meact.useEffect(() => {
      apiService.getTotalImagesCount().then((total) => {
        setImgTotal(total);
        renderImage(getImage());
      });
    }, [image]);

    // When we add an image, we only need to update the total images count in index.html
    meact.useEffect(() => {
      const counter = document.querySelector("#imageCount");
      apiService.getImageIndex().then((index) => {
        const total = getImgTotal();
        const selectedUser = getSelectedUser();
        const galleryInfo = selectedUser
          ? ` (${selectedUser.username}'s gallery)`
          : " (All users)";
        counter.innerHTML = `${index} of ${total}${galleryInfo}`;
      });
    }, [imgTotal, selectedUser]);

    // Update button permissions when authentication status, user, or image changes
    meact.useEffect(() => {
      updateButtonPermissions();
    }, [isAuthenticated, currentUser, image, selectedUser]);

    meact.useEffect(() => {
      renderUserGallery();
    }, [allUsers, selectedUser, isAuthenticated, currentUser]);

    document
      .querySelector("#allUsersBtn")
      .addEventListener("click", function () {
        switchToAllUsersGallery();
      });

    // submit listener for add picture form
    document
      .querySelector("#addPictureForm")
      .addEventListener("submit", function (e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        apiService
          .addImage(formData)
          .then(() => {
            return apiService.getCurrentImage();
          })
          .then((image) => {
            setImage(image);
            setCommentPage(0);
          })
          .catch((err) => {
            if (
              err.message.includes("Unauthorized") ||
              err.message.includes("401")
            ) {
              alert("You must be logged in to add images");
              setIsAuthenticated(false);
              setCurrentUser(null);
            } else if (
              err.message.includes("Forbidden") ||
              err.message.includes("403")
            ) {
              alert("You are not authorized to perform this action");
            } else {
              alert("Failed to add image: " + err.message);
              setImage(null);
            }
          });
        e.target.reset();
      });

    document.querySelector("#nextImg").addEventListener("click", function () {
      apiService
        .getNextImage()
        .then((image) => {
          setImage(image);
          setCommentPage(0);
        })
        .catch((err) => {
          if (
            err.message.includes("Unauthorized") ||
            err.message.includes("401")
          ) {
            alert("You must be logged in to view images");
            setIsAuthenticated(false);
            setCurrentUser(null);
          } else if (
            err.message.includes("Forbidden") ||
            err.message.includes("403")
          ) {
            alert("You are not authorized to view this image");
          } else {
            setImage(null);
          }
        });
    });

    document.querySelector("#prevImg").addEventListener("click", function () {
      apiService
        .getPrevImage()
        .then((image) => {
          setImage(image);
          setCommentPage(0);
        })
        .catch((err) => {
          if (
            err.message.includes("Unauthorized") ||
            err.message.includes("401")
          ) {
            alert("You must be logged in to view images");
            setIsAuthenticated(false);
            setCurrentUser(null);
          } else if (
            err.message.includes("Forbidden") ||
            err.message.includes("403")
          ) {
            alert("You are not authorized to view this image");
          } else {
            setImage(null);
          }
        });
    });

    document.querySelector("#delImg").addEventListener("click", function () {
      apiService
        .deleteImage()
        .then((nextImage) => {
          setImage(nextImage);
          setCommentPage(0);
        })
        .catch((err) => {
          if (
            err.message.includes("Unauthorized") ||
            err.message.includes("401")
          ) {
            alert("You must be logged in to delete images");
            setIsAuthenticated(false);
            setCurrentUser(null);
          } else if (
            err.message.includes("Forbidden") ||
            err.message.includes("403") ||
            err.message.includes("Not authorized")
          ) {
            alert("You are not authorized to delete this image");
          } else {
            alert("Failed to delete image: " + err.message);
            setImage(null);
          }
        });
    });

    document
      .querySelector("#addCommentBtn")
      .addEventListener("click", function () {
        const form = document.querySelector("#addCommentForm");
        if (!form.classList.contains("hidden")) {
          form.classList.add("hidden");
          form.innerHTML = "";
        } else {
          form.classList.remove("hidden");
          form.innerHTML = `
              <textarea name="content" class="comment-element" placeholder="Comment" required></textarea>
              <button class="btn comment-btn" type="submit">Add Comment</button>
            `;
        }
      });

    document
      .querySelector("#addCommentForm")
      .addEventListener("submit", function (e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const formProps = Object.fromEntries(formData);

        apiService
          .addCommentToCurrentImage(formProps.content)
          .then(() => {
            setCommentPage(0);
          })
          .catch((err) => {
            if (
              err.message.includes("Unauthorized") ||
              err.message.includes("401")
            ) {
              alert("You must be logged in to add comments");
              setIsAuthenticated(false);
              setCurrentUser(null);
            } else if (
              err.message.includes("Forbidden") ||
              err.message.includes("403")
            ) {
              alert("You are not authorized to add comments");
            } else {
              alert("Failed to add comment: " + err.message);
            }
          });
        e.target.reset();
      });

    document.querySelector("#logout").addEventListener("click", function () {
      apiService
        .signOut()
        .then(() => {
          setIsAuthenticated(false);
          setCurrentUser(null);
          window.location.href = "authenticate.html";
        })
        .catch((err) => {
          alert(err.message || "Failed to sign out");
        });
    });

    // When comments change, re-render the comments section
    meact.useEffect(() => {
      const commentsDiv = document.querySelector(".comments-list");
      commentsDiv.innerHTML = "";

      if (!getIsAuthenticated()) {
        commentsDiv.innerHTML = "<p>Not authenticated</p>";
        return;
      }

      apiService
        .getCommentsForCurrentImage(getCommentPage(), 10)
        .then((comments) => {
          if (!comments || comments.length === 0) {
            commentsDiv.innerHTML = "<p>No comments available</p>";
            return;
          }
          comments.forEach((comment) => {
            const commentElement = commentComponent(comment);
            commentsDiv.appendChild(commentElement);
          });

          apiService.getCommentsCountForCurrentImage().then((totalComments) => {
            const totalPages = Math.ceil(totalComments / 10);
            const page = getCommentPage();

            const paginationDiv = document.createElement("div");
            paginationDiv.classList.add("comments-pagination");
            if (page > 0) {
              const prevBtn = document.createElement("button");
              prevBtn.className =
                "icon-container prev-comments-icon comment-nav";
              prevBtn.title = "Previous Page";
              prevBtn.addEventListener("click", () => setCommentPage(page - 1));
              paginationDiv.appendChild(prevBtn);
            }
            if (page < totalPages - 1) {
              const nextBtn = document.createElement("button");
              nextBtn.className =
                "icon-container next-comments-icon comment-nav";
              nextBtn.title = "Next Page";
              nextBtn.addEventListener("click", () => setCommentPage(page + 1));
              paginationDiv.appendChild(nextBtn);
            }
            if (paginationDiv.children.length > 0) {
              commentsDiv.appendChild(paginationDiv);
            }
          });
        })
        .catch((err) => {
          if (err.message.includes("Unauthorized")) {
            setIsAuthenticated(false);
            setCurrentUser(null);
            commentsDiv.innerHTML = "<p>Not authenticated</p>";
          } else {
            commentsDiv.innerHTML = "<p>Error loading comments</p>";
          }
        });
    }, [commentPage, isAuthenticated, currentUser]);
  });
})();
